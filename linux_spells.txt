VIM:

Search and replace

/stringToSearch

:%s/foo/bar/gc - Change each 'foo' to 'bar', but ask for confirmation first.

:%s/\<foo\>/bar/gc - Change only whole words exactly matching 'foo' to 'bar'; ask for confirmation.

:%s/foo/bar/gci - Change each 'foo' (case insensitive) to 'bar'; ask for confirmation. This may be wanted after using :set noignorecase to make searches case sensitive (the default).

:%s/foo/bar/gcI - Change each 'foo' (case sensitive) to 'bar'; ask for confirmation. This may be wanted after using :set ignorecase to make searches case insensitive.

:q - quit

:q! - quit without saving

:wq - write (save) and quit
ZZ - write (save) and quit

dd - delete line
yw - copy word
yy - copy line
p and P - paste
v - visual mode
V - visual mode lines

u - undo the last operation (can be repeated to undo preceding commands)

:14,15d - deletes lines 14 and 15 inclusive
2dd - deletes current (1) (at the cursor) and next line (2)

CTRL-R - redo the last undo action

U: return the last line which was modified to its original state (reverse all changes in last modified line)

git:

git rebase -i HEAD~3 (on a local branch!!! brings up an editor to squash commits (merge in one)).
git remote prune origin (--dry-run) - deletes branches (already deleted on origin) from your local repository.
git diff <file> - prints a diff between working copy and commited version of the <file>.
git diff(tool) branch1..branch2 <path_to_file> (sample git difftool nnikolov/FormattedStringXML..master JS/BCL/ui/builder/component-builder.ts)
git diff(tool) checkin1SHA..checkin2SHA <path_to_file>
gitk <file> - shows the history of a file.
git checkout <commit_id> <path_to_file> - To return the file to some previous state
git checkout origin/master <path_to_file> -  To return it to the state at the remote HEAD
git show <commit_id> - shows an info about the commit
git show --pretty="format:" --name-only <commit_id> - shows only files from a commit
git push -u origin <branchName> - pushes (publishing) branch to the origin (GitHub)
git diff-tree --no-commit-id --name-only -r <commit_id> - lists all files in a commit (same as git show --pretty="format:" --name-only)
git submodule update --init --recursive - updates all submodules :-)
git checkout -- . - restores entire info from the .git folder (will be same as in origin repo)
git reset --hard HEAD - undo checkout all changes.

Advanced scenarios:

1. Rebasing our localBranch onto master. (resolving conflicts using theirs and ours options).

Having a branch with name localBranch where there are some check-ins.
(localBranch) git checkout master
(master) git pull
(master) git checkout localBranch
(localBranch) git rebase master
at some point there is a huge conflict and master branch version of the file (foo.ts) is needed.
(localBranch) git checkout --ours foo.ts - this will take the version from master branch.
(localBranch) git checkout --theirs foo.ts - this will take the version from localBranch branch.

(localBranch) git add foo.ts
(localBranch) git rebase --continue
jobs done.

2. Exclude a file from commit.

git reset --soft HEAD~1 - this will put all files from last commit to stage again
git reset HEAD /path-to-unwanted-file
git commit -c ORIG_HEAD - will commit with the original commit message

Linux:

find . -iname \*.JPG - finds all JPG and jpg files starting from the current directory (.)
rm -rf dirName - removes a directory with all its contents
grep --exclude=*.tgz -rnw "path" -e "pattern" - find all files that contains string pattern within directory 'path' -r recursive, -w - match whole word, -n line number
grep --exclude-dir={node_modules,platforms} -rnw "path" -e "pattern" - find all files that contains string pattern within directory 'path' -r recursive, -w - match whole word, -n line number

source ~/.bashrc (. ~/.bashrc - short version) - reloads .bashrc in case there is a change in it. For example adding a new alias.

TNS

Run in folder where tns node module is installed.
npm install nativescript.tgz (get latest from "K:\DISTRIBUTIONS\NativeScript\Builds\CLI\Stable\nativescript.tgz")
tns create projectName - creates a project with projectName within the current directory
tns platform add android --path=projectPath --frameworkPath=tns.gzip - add android platform
tns prepare android --path=projectPath - prepares android platform (creates bootstrap.js file)

ADB

run-as org.nativescript.NativeScript ls -al files/app/cuteness.io

cross-platform-modules

npm install grunt && npm install grunt-ts && npm install typescript@1.4.1

grunt --verbose --runtslint=false
grunt ts

Command Editing Shortcuts

Ctrl + a – go to the start of the command line
Ctrl + e – go to the end of the command line
Ctrl + k – delete from cursor to the end of the command line
Ctrl + u – delete from cursor to the start of the command line
Ctrl + w – delete from cursor to start of word (i.e. delete backwards one word)
Ctrl + y – paste word or text that was cut using one of the deletion shortcuts (such as the one above) after the cursor
Ctrl + xx – move between start of command line and current cursor position (and back again)
Alt + b – move backward one word (or go to start of word the cursor is currently on)
Alt + f – move forward one word (or go to end of word the cursor is currently on)
Alt + d – delete to end of word starting at cursor (whole word if cursor is at the beginning of word)
Alt + c – capitalize to end of word starting at cursor (whole word if cursor is at the beginning of word)
Alt + u – make uppercase from cursor to end of word
Alt + l – make lowercase from cursor to end of word
Alt + t – swap current word with previous
Ctrl + f – move forward one character
Ctrl + b – move backward one character
Ctrl + d – delete character under the cursor
Ctrl + h – delete character before the cursor
Ctrl + t – swap character under cursor with the previous one
Command Recall Shortcuts

Ctrl + r – search the history backwards
Ctrl + g – escape from history searching mode
Ctrl + p – previous command in history (i.e. walk back through the command history)
Ctrl + n – next command in history (i.e. walk forward through the command history)
Alt + . – use the last word of the previous command
Command Control Shortcuts

Ctrl + l – clear the screen
Ctrl + s – stops the output to the screen (for long running verbose command)
Ctrl + q – allow output to the screen (if previously stopped using command above)
Ctrl + c – terminate the command
Ctrl + z – suspend/stop the command
Bash Bang (!) Commands

Bash also has some handy features that use the ! (bang) to allow you to do some funky stuff with bash commands.

!! – run last command
!blah – run the most recent command that starts with ‘blah’ (e.g. !ls)
!blah:p – print out the command that !blah would run (also adds it as the latest command in the command history)
!$ – the last word of the previous command (same as Alt + .)
!$:p – print out the word that !$ would substitute
!* – the previous command except for the last word (e.g. if you type ‘find some_file.txt /‘, then !* would give you ‘find some_file.txt‘)
!*:p – print out what !* would substitute